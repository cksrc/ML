"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable, Sequence
from datetime import datetime
from typing import Optional, Union

logger = ...
MAX_FILES_TO_UPLOAD = ...
TEMP_ARCHIVE_FILE = ...
MAX_RETRIES = ...
REQUEST_TIMEOUT = ...
class UploadDirectoryInfo:
    def __init__(self, name: str, files: Optional[list[str]] = ..., directories: Optional[list[UploadDirectoryInfo]] = ...) -> None:
        ...
    
    def serialize(self) -> dict:
        ...
    


def parse_datetime_string(string: str) -> Union[datetime, str]:
    ...

class File:
    def __init__(self, init_dict: dict) -> None:
        ...
    
    @staticmethod
    def get_size(size: float, precision: int = ...) -> str:
        ...
    


def filtered_walk(*, base_dir: str, ignore_patterns: Sequence[str]) -> Iterable[tuple[str, list[str], list[str]]]:
    """An `os.walk` like directory tree generator with filtering.

    This method filters out files matching any ignore pattern.

    Args:
        base_dir (str): The base dir to walk in.
        ignore_patterns (Sequence[str]):
            The patterns for ignored files. These are standard wildcards relative to base_dir.

    Yields:
        Iterable[tuple[str, list[str], list[str]]]: (base_dir_path, list[dir_names], list[filtered_file_names])
    """
    ...

def upload_files_and_directories(folder: str, *, ignore_patterns: Sequence[str], item_type: str, quiet: bool = ...) -> UploadDirectoryInfo:
    ...

def normalize_patterns(*, default: list[str], additional: Optional[Union[list[str], str]]) -> list[str]:
    """Merges additional patterns with the default, and normalize the dir pattern with wildcard."""
    ...

