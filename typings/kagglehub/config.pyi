"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Optional

"""Retrieve config values that a user may set/override.

For config values specific to a resolver's environment (a user is not expected to override),
add it to the resolver's module.
"""
DEFAULT_CACHE_FOLDER = ...
DEFAULT_KAGGLE_API_ENDPOINT = ...
DEFAULT_KAGGLE_CREDENTIALS_FOLDER = ...
DEFAULT_LOG_LEVEL = ...
CREDENTIALS_FILENAME = ...
CACHE_FOLDER_ENV_VAR_NAME = ...
KAGGLE_API_ENDPOINT_ENV_VAR_NAME = ...
USERNAME_ENV_VAR_NAME = ...
KEY_ENV_VAR_NAME = ...
CREDENTIALS_FOLDER_ENV_VAR_NAME = ...
LOG_VERBOSITY_ENV_VAR_NAME = ...
DISABLE_KAGGLE_CACHE_ENV_VAR_NAME = ...
DISABLE_COLAB_CACHE_ENV_VAR_NAME = ...
TBE_RUNTIME_ADDR_ENV_VAR_NAME = ...
CREDENTIALS_JSON_USERNAME = ...
CREDENTIALS_JSON_KEY = ...
COLAB_SECRET_USERNAME = ...
COLAB_SECRET_KEY = ...
_kaggle_credentials = ...
LOG_LEVELS_MAP = ...
TRUTHY_VALUES = ...
logger = ...
@dataclass
class KaggleApiCredentials:
    username: str
    key: str
    ...


def get_cache_folder() -> str:
    ...

def get_kaggle_api_endpoint() -> str:
    ...

def get_kaggle_credentials() -> Optional[KaggleApiCredentials]:
    ...

def get_log_verbosity() -> int:
    ...

def is_colab_cache_disabled() -> bool:
    ...

def is_kaggle_cache_disabled() -> bool:
    ...

def set_kaggle_credentials(username: str, api_key: str) -> None:
    ...

def clear_kaggle_credentials() -> None:
    ...

def get_colab_credentials() -> Optional[KaggleApiCredentials]:
    ...

