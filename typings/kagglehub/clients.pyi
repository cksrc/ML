"""
This type stub file was generated by pyright.
"""

import requests
import requests.auth
from typing import Optional
from kagglehub.handle import ResourceHandle

CHUNK_SIZE = ...
DEFAULT_CONNECT_TIMEOUT = ...
DEFAULT_READ_TIMEOUT = ...
ACCEPT_RANGE_HTTP_HEADER = ...
HTTP_STATUS_404 = ...
_CHECKSUM_MISMATCH_MSG_TEMPLATE = ...
def get_user_agent() -> str:
    """Identifies the user agent based on available system information.

    Returns:
        str: user agent information.
    """
    ...

logger = ...
class KaggleApiV1Client:
    BASE_PATH = ...
    def __init__(self) -> None:
        ...
    
    def get(self, path: str, resource_handle: Optional[ResourceHandle] = ...) -> dict:
        ...
    
    def post(self, path: str, data: dict) -> dict:
        ...
    
    def download_file(self, path: str, out_file: str, resource_handle: Optional[ResourceHandle] = ..., cached_path: Optional[str] = ...) -> bool:
        """
        Issues a call to kaggle api and downloads files. For competition downloads,
        call may return early if local cache is newer than the last time the file was modified.

        Returns:
        bool:  If downloading remote was necessary
        """
        ...
    
    def has_credentials(self) -> bool:
        ...
    


KAGGLE_JWT_TOKEN_ENV_VAR_NAME = ...
KAGGLE_DATA_PROXY_TOKEN_ENV_VAR_NAME = ...
class KaggleJwtClient:
    BASE_PATH = ...
    def __init__(self) -> None:
        ...
    
    def post(self, request_name: str, data: dict, timeout: tuple[float, float] = ...) -> dict:
        ...
    


class ColabClient:
    IS_SUPPORTED_PATH = ...
    MOUNT_PATH = ...
    TBE_RUNTIME_ADDR_ENV_VAR_NAME = ...
    def __init__(self) -> None:
        ...
    
    def post(self, data: dict, handle_path: str, resource_handle: Optional[ResourceHandle] = ...) -> Optional[dict]:
        ...
    


class KaggleTokenAuth(requests.auth.AuthBase):
    def __call__(self, r: requests.PreparedRequest): # -> PreparedRequest:
        ...
    


