"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DatasetUpdateSettingsRequest:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, title=..., subtitle=..., description=..., is_private=..., licenses=..., keywords=..., collaborators=..., data=...) -> None:
        """DatasetUpdateSettingsRequest - a model defined in Swagger"""
        ...
    
    @property
    def title(self): # -> None:
        """Gets the title of this DatasetUpdateSettingsRequest.  # noqa: E501

        Title of the dataset  # noqa: E501

        :return: The title of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @title.setter
    def title(self, title): # -> None:
        """Sets the title of this DatasetUpdateSettingsRequest.

        Title of the dataset  # noqa: E501

        :param title: The title of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def subtitle(self): # -> None:
        """Gets the subtitle of this DatasetUpdateSettingsRequest.  # noqa: E501

        Subtitle of the dataset  # noqa: E501

        :return: The subtitle of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @subtitle.setter
    def subtitle(self, subtitle): # -> None:
        """Sets the subtitle of this DatasetUpdateSettingsRequest.

        Subtitle of the dataset  # noqa: E501

        :param subtitle: The subtitle of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this DatasetUpdateSettingsRequest.  # noqa: E501

        Decription of the dataset  # noqa: E501

        :return: The description of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this DatasetUpdateSettingsRequest.

        Decription of the dataset  # noqa: E501

        :param description: The description of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def is_private(self): # -> None:
        """Gets the is_private of this DatasetUpdateSettingsRequest.  # noqa: E501

        Whether or not the dataset should be private  # noqa: E501

        :return: The is_private of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @is_private.setter
    def is_private(self, is_private): # -> None:
        """Sets the is_private of this DatasetUpdateSettingsRequest.

        Whether or not the dataset should be private  # noqa: E501

        :param is_private: The is_private of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def licenses(self): # -> None:
        """Gets the licenses of this DatasetUpdateSettingsRequest.  # noqa: E501

        A list of licenses that apply to this dataset  # noqa: E501

        :return: The licenses of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: list[object]
        """
        ...
    
    @licenses.setter
    def licenses(self, licenses): # -> None:
        """Sets the licenses of this DatasetUpdateSettingsRequest.

        A list of licenses that apply to this dataset  # noqa: E501

        :param licenses: The licenses of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: list[object]
        """
        ...
    
    @property
    def keywords(self): # -> None:
        """Gets the keywords of this DatasetUpdateSettingsRequest.  # noqa: E501

        A list of keywords that apply to this dataset  # noqa: E501

        :return: The keywords of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @keywords.setter
    def keywords(self, keywords): # -> None:
        """Sets the keywords of this DatasetUpdateSettingsRequest.

        A list of keywords that apply to this dataset  # noqa: E501

        :param keywords: The keywords of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def collaborators(self): # -> None:
        """Gets the collaborators of this DatasetUpdateSettingsRequest.  # noqa: E501

        A list of collaborators that may read or edit this dataset  # noqa: E501

        :return: The collaborators of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: list[object]
        """
        ...
    
    @collaborators.setter
    def collaborators(self, collaborators): # -> None:
        """Sets the collaborators of this DatasetUpdateSettingsRequest.

        A list of collaborators that may read or edit this dataset  # noqa: E501

        :param collaborators: The collaborators of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: list[object]
        """
        ...
    
    @property
    def data(self): # -> None:
        """Gets the data of this DatasetUpdateSettingsRequest.  # noqa: E501

        A list containing metadata for each file in the dataset  # noqa: E501

        :return: The data of this DatasetUpdateSettingsRequest.  # noqa: E501
        :rtype: list[object]
        """
        ...
    
    @data.setter
    def data(self, data): # -> None:
        """Sets the data of this DatasetUpdateSettingsRequest.

        A list containing metadata for each file in the dataset  # noqa: E501

        :param data: The data of this DatasetUpdateSettingsRequest.  # noqa: E501
        :type: list[object]
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


