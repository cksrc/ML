"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class StartBlobUploadResponse:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, token=..., create_url=...) -> None:
        """StartBlobUploadResponse - a model defined in Swagger"""
        ...
    
    @property
    def token(self): # -> None:
        """Gets the token of this StartBlobUploadResponse.  # noqa: E501

        Opaque string token used to reference the new blob/file.  # noqa: E501

        :return: The token of this StartBlobUploadResponse.  # noqa: E501
        :rtype: str
        """
        ...
    
    @token.setter
    def token(self, token): # -> None:
        """Sets the token of this StartBlobUploadResponse.

        Opaque string token used to reference the new blob/file.  # noqa: E501

        :param token: The token of this StartBlobUploadResponse.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def create_url(self): # -> None:
        """Gets the create_url of this StartBlobUploadResponse.  # noqa: E501

        URL to use to start the upload.  # noqa: E501

        :return: The create_url of this StartBlobUploadResponse.  # noqa: E501
        :rtype: str
        """
        ...
    
    @create_url.setter
    def create_url(self, create_url): # -> None:
        """Sets the create_url of this StartBlobUploadResponse.

        URL to use to start the upload.  # noqa: E501

        :param create_url: The create_url of this StartBlobUploadResponse.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


