"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class DatasetNewVersionRequest:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, version_notes=..., subtitle=..., description=..., files=..., convert_to_csv=..., category_ids=..., delete_old_versions=...) -> None:
        """DatasetNewVersionRequest - a model defined in Swagger"""
        ...
    
    @property
    def version_notes(self): # -> None:
        """Gets the version_notes of this DatasetNewVersionRequest.  # noqa: E501

        The version notes for the new dataset version  # noqa: E501

        :return: The version_notes of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @version_notes.setter
    def version_notes(self, version_notes): # -> None:
        """Sets the version_notes of this DatasetNewVersionRequest.

        The version notes for the new dataset version  # noqa: E501

        :param version_notes: The version_notes of this DatasetNewVersionRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def subtitle(self): # -> None:
        """Gets the subtitle of this DatasetNewVersionRequest.  # noqa: E501

        The subtitle to set on the dataset  # noqa: E501

        :return: The subtitle of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @subtitle.setter
    def subtitle(self, subtitle): # -> None:
        """Sets the subtitle of this DatasetNewVersionRequest.

        The subtitle to set on the dataset  # noqa: E501

        :param subtitle: The subtitle of this DatasetNewVersionRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this DatasetNewVersionRequest.  # noqa: E501

        The description to set on the dataset  # noqa: E501

        :return: The description of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this DatasetNewVersionRequest.

        The description to set on the dataset  # noqa: E501

        :param description: The description of this DatasetNewVersionRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def files(self): # -> None:
        """Gets the files of this DatasetNewVersionRequest.  # noqa: E501

        A list of files that should be associated with the dataset  # noqa: E501

        :return: The files of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: list[UploadFile]
        """
        ...
    
    @files.setter
    def files(self, files): # -> None:
        """Sets the files of this DatasetNewVersionRequest.

        A list of files that should be associated with the dataset  # noqa: E501

        :param files: The files of this DatasetNewVersionRequest.  # noqa: E501
        :type: list[UploadFile]
        """
        ...
    
    @property
    def convert_to_csv(self): # -> None:
        """Gets the convert_to_csv of this DatasetNewVersionRequest.  # noqa: E501

        Whether or not a tabular dataset should be converted to csv  # noqa: E501

        :return: The convert_to_csv of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @convert_to_csv.setter
    def convert_to_csv(self, convert_to_csv): # -> None:
        """Sets the convert_to_csv of this DatasetNewVersionRequest.

        Whether or not a tabular dataset should be converted to csv  # noqa: E501

        :param convert_to_csv: The convert_to_csv of this DatasetNewVersionRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def category_ids(self): # -> None:
        """Gets the category_ids of this DatasetNewVersionRequest.  # noqa: E501

        A list of tag IDs to associated with the dataset  # noqa: E501

        :return: The category_ids of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @category_ids.setter
    def category_ids(self, category_ids): # -> None:
        """Sets the category_ids of this DatasetNewVersionRequest.

        A list of tag IDs to associated with the dataset  # noqa: E501

        :param category_ids: The category_ids of this DatasetNewVersionRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def delete_old_versions(self): # -> None:
        """Gets the delete_old_versions of this DatasetNewVersionRequest.  # noqa: E501

        Whether or not all previous versions of the dataset should be deleted upon creating the new version  # noqa: E501

        :return: The delete_old_versions of this DatasetNewVersionRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @delete_old_versions.setter
    def delete_old_versions(self, delete_old_versions): # -> None:
        """Sets the delete_old_versions of this DatasetNewVersionRequest.

        Whether or not all previous versions of the dataset should be deleted upon creating the new version  # noqa: E501

        :param delete_old_versions: The delete_old_versions of this DatasetNewVersionRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


