"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class ModelNewRequest:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, owner_slug=..., slug=..., title=..., subtitle=..., is_private=..., description=..., publish_time=..., provenance_sources=...) -> None:
        """ModelNewRequest - a model defined in Swagger"""
        ...
    
    @property
    def owner_slug(self): # -> None:
        """Gets the owner_slug of this ModelNewRequest.  # noqa: E501

        The owner's slug  # noqa: E501

        :return: The owner_slug of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @owner_slug.setter
    def owner_slug(self, owner_slug): # -> None:
        """Sets the owner_slug of this ModelNewRequest.

        The owner's slug  # noqa: E501

        :param owner_slug: The owner_slug of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def slug(self): # -> None:
        """Gets the slug of this ModelNewRequest.  # noqa: E501

        The slug that the model should be created with  # noqa: E501

        :return: The slug of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @slug.setter
    def slug(self, slug): # -> None:
        """Sets the slug of this ModelNewRequest.

        The slug that the model should be created with  # noqa: E501

        :param slug: The slug of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def title(self): # -> None:
        """Gets the title of this ModelNewRequest.  # noqa: E501

        The title of the new model  # noqa: E501

        :return: The title of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @title.setter
    def title(self, title): # -> None:
        """Sets the title of this ModelNewRequest.

        The title of the new model  # noqa: E501

        :param title: The title of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def subtitle(self): # -> None:
        """Gets the subtitle of this ModelNewRequest.  # noqa: E501

        The subtitle of the new model  # noqa: E501

        :return: The subtitle of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @subtitle.setter
    def subtitle(self, subtitle): # -> None:
        """Sets the subtitle of this ModelNewRequest.

        The subtitle of the new model  # noqa: E501

        :param subtitle: The subtitle of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def is_private(self): # -> None:
        """Gets the is_private of this ModelNewRequest.  # noqa: E501

        Whether or not the model should be private  # noqa: E501

        :return: The is_private of this ModelNewRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @is_private.setter
    def is_private(self, is_private): # -> None:
        """Sets the is_private of this ModelNewRequest.

        Whether or not the model should be private  # noqa: E501

        :param is_private: The is_private of this ModelNewRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def description(self): # -> None:
        """Gets the description of this ModelNewRequest.  # noqa: E501

        The description to be set on the model  # noqa: E501

        :return: The description of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @description.setter
    def description(self, description): # -> None:
        """Sets the description of this ModelNewRequest.

        The description to be set on the model  # noqa: E501

        :param description: The description of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def publish_time(self): # -> None:
        """Gets the publish_time of this ModelNewRequest.  # noqa: E501

        When the model was initially published  # noqa: E501

        :return: The publish_time of this ModelNewRequest.  # noqa: E501
        :rtype: date
        """
        ...
    
    @publish_time.setter
    def publish_time(self, publish_time): # -> None:
        """Sets the publish_time of this ModelNewRequest.

        When the model was initially published  # noqa: E501

        :param publish_time: The publish_time of this ModelNewRequest.  # noqa: E501
        :type: date
        """
        ...
    
    @property
    def provenance_sources(self): # -> None:
        """Gets the provenance_sources of this ModelNewRequest.  # noqa: E501

        The provenance sources to be set on the model  # noqa: E501

        :return: The provenance_sources of this ModelNewRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @provenance_sources.setter
    def provenance_sources(self, provenance_sources): # -> None:
        """Sets the provenance_sources of this ModelNewRequest.

        The provenance sources to be set on the model  # noqa: E501

        :param provenance_sources: The provenance_sources of this ModelNewRequest.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


