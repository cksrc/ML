"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class KernelPushRequest:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = ...
    attribute_map = ...
    def __init__(self, id=..., slug=..., new_title=..., text=..., language=..., kernel_type=..., is_private=..., enable_gpu=..., enable_tpu=..., enable_internet=..., dataset_data_sources=..., competition_data_sources=..., kernel_data_sources=..., model_data_sources=..., category_ids=..., docker_image_pinning_type=...) -> None:
        """KernelPushRequest - a model defined in Swagger"""
        ...
    
    @property
    def id(self): # -> None:
        """Gets the id of this KernelPushRequest.  # noqa: E501

        The kernel's ID number. One of `id` and `slug` are required. If both are specified, `id` will be preferred  # noqa: E501

        :return: The id of this KernelPushRequest.  # noqa: E501
        :rtype: int
        """
        ...
    
    @id.setter
    def id(self, id): # -> None:
        """Sets the id of this KernelPushRequest.

        The kernel's ID number. One of `id` and `slug` are required. If both are specified, `id` will be preferred  # noqa: E501

        :param id: The id of this KernelPushRequest.  # noqa: E501
        :type: int
        """
        ...
    
    @property
    def slug(self): # -> None:
        """Gets the slug of this KernelPushRequest.  # noqa: E501

        The full slug of the kernel to push to, in the format `USERNAME/KERNEL-SLUG`. The kernel slug must be the title lowercased with dashes (`-`) replacing spaces. One of `id` and `slug` are required. If both are specified, `id` will be preferred  # noqa: E501

        :return: The slug of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @slug.setter
    def slug(self, slug): # -> None:
        """Sets the slug of this KernelPushRequest.

        The full slug of the kernel to push to, in the format `USERNAME/KERNEL-SLUG`. The kernel slug must be the title lowercased with dashes (`-`) replacing spaces. One of `id` and `slug` are required. If both are specified, `id` will be preferred  # noqa: E501

        :param slug: The slug of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def new_title(self): # -> None:
        """Gets the new_title of this KernelPushRequest.  # noqa: E501

        The title to be set on the kernel  # noqa: E501

        :return: The new_title of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @new_title.setter
    def new_title(self, new_title): # -> None:
        """Sets the new_title of this KernelPushRequest.

        The title to be set on the kernel  # noqa: E501

        :param new_title: The new_title of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def text(self): # -> None:
        """Gets the text of this KernelPushRequest.  # noqa: E501

        The kernel's source code  # noqa: E501

        :return: The text of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        """Sets the text of this KernelPushRequest.

        The kernel's source code  # noqa: E501

        :param text: The text of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def language(self): # -> None:
        """Gets the language of this KernelPushRequest.  # noqa: E501

        The language that the kernel is written in  # noqa: E501

        :return: The language of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @language.setter
    def language(self, language): # -> None:
        """Sets the language of this KernelPushRequest.

        The language that the kernel is written in  # noqa: E501

        :param language: The language of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def kernel_type(self): # -> None:
        """Gets the kernel_type of this KernelPushRequest.  # noqa: E501

        The type of kernel. Cannot be changed once the kernel has been created  # noqa: E501

        :return: The kernel_type of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @kernel_type.setter
    def kernel_type(self, kernel_type): # -> None:
        """Sets the kernel_type of this KernelPushRequest.

        The type of kernel. Cannot be changed once the kernel has been created  # noqa: E501

        :param kernel_type: The kernel_type of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    @property
    def is_private(self): # -> None:
        """Gets the is_private of this KernelPushRequest.  # noqa: E501

        Whether or not the kernel should be private  # noqa: E501

        :return: The is_private of this KernelPushRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @is_private.setter
    def is_private(self, is_private): # -> None:
        """Sets the is_private of this KernelPushRequest.

        Whether or not the kernel should be private  # noqa: E501

        :param is_private: The is_private of this KernelPushRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def enable_gpu(self): # -> None:
        """Gets the enable_gpu of this KernelPushRequest.  # noqa: E501

        Whether or not the kernel should run on a GPU  # noqa: E501

        :return: The enable_gpu of this KernelPushRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @enable_gpu.setter
    def enable_gpu(self, enable_gpu): # -> None:
        """Sets the enable_gpu of this KernelPushRequest.

        Whether or not the kernel should run on a GPU  # noqa: E501

        :param enable_gpu: The enable_gpu of this KernelPushRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def enable_tpu(self): # -> None:
        """Gets the enable_tpu of this KernelPushRequest.  # noqa: E501

        Whether or not the kernel should run on a TPU  # noqa: E501

        :return: The enable_tpu of this KernelPushRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @enable_tpu.setter
    def enable_tpu(self, enable_tpu): # -> None:
        """Sets the enable_tpu of this KernelPushRequest.

        Whether or not the kernel should run on a TPU  # noqa: E501

        :param enable_tpu: The enable_tpu of this KernelPushRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def enable_internet(self): # -> None:
        """Gets the enable_internet of this KernelPushRequest.  # noqa: E501

        Whether or not the kernel should be able to access the internet  # noqa: E501

        :return: The enable_internet of this KernelPushRequest.  # noqa: E501
        :rtype: bool
        """
        ...
    
    @enable_internet.setter
    def enable_internet(self, enable_internet): # -> None:
        """Sets the enable_internet of this KernelPushRequest.

        Whether or not the kernel should be able to access the internet  # noqa: E501

        :param enable_internet: The enable_internet of this KernelPushRequest.  # noqa: E501
        :type: bool
        """
        ...
    
    @property
    def dataset_data_sources(self): # -> None:
        """Gets the dataset_data_sources of this KernelPushRequest.  # noqa: E501

        A list of dataset data sources that the kernel should use. Each dataset is specified as `USERNAME/DATASET-SLUG`  # noqa: E501

        :return: The dataset_data_sources of this KernelPushRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @dataset_data_sources.setter
    def dataset_data_sources(self, dataset_data_sources): # -> None:
        """Sets the dataset_data_sources of this KernelPushRequest.

        A list of dataset data sources that the kernel should use. Each dataset is specified as `USERNAME/DATASET-SLUG`  # noqa: E501

        :param dataset_data_sources: The dataset_data_sources of this KernelPushRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def competition_data_sources(self): # -> None:
        """Gets the competition_data_sources of this KernelPushRequest.  # noqa: E501

        A list of competition data sources that the kernel should use  # noqa: E501

        :return: The competition_data_sources of this KernelPushRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @competition_data_sources.setter
    def competition_data_sources(self, competition_data_sources): # -> None:
        """Sets the competition_data_sources of this KernelPushRequest.

        A list of competition data sources that the kernel should use  # noqa: E501

        :param competition_data_sources: The competition_data_sources of this KernelPushRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def kernel_data_sources(self): # -> None:
        """Gets the kernel_data_sources of this KernelPushRequest.  # noqa: E501

        A list of kernel data sources that the kernel should use. Each dataset is specified as `USERNAME/KERNEL-SLUG`  # noqa: E501

        :return: The kernel_data_sources of this KernelPushRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @kernel_data_sources.setter
    def kernel_data_sources(self, kernel_data_sources): # -> None:
        """Sets the kernel_data_sources of this KernelPushRequest.

        A list of kernel data sources that the kernel should use. Each dataset is specified as `USERNAME/KERNEL-SLUG`  # noqa: E501

        :param kernel_data_sources: The kernel_data_sources of this KernelPushRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def model_data_sources(self): # -> None:
        """Gets the model_data_sources of this KernelPushRequest.  # noqa: E501

        A list of model data sources that the kernel should use. Each model is specified as `USERNAME/MODEL-SLUG/FRAMEWORK/VARIATION-SLUG/VERSION-NUMBER`  # noqa: E501

        :return: The model_data_sources of this KernelPushRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @model_data_sources.setter
    def model_data_sources(self, model_data_sources): # -> None:
        """Sets the model_data_sources of this KernelPushRequest.

        A list of model data sources that the kernel should use. Each model is specified as `USERNAME/MODEL-SLUG/FRAMEWORK/VARIATION-SLUG/VERSION-NUMBER`  # noqa: E501

        :param model_data_sources: The model_data_sources of this KernelPushRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def category_ids(self): # -> None:
        """Gets the category_ids of this KernelPushRequest.  # noqa: E501

        A list of tag IDs to associated with the kernel  # noqa: E501

        :return: The category_ids of this KernelPushRequest.  # noqa: E501
        :rtype: list[str]
        """
        ...
    
    @category_ids.setter
    def category_ids(self, category_ids): # -> None:
        """Sets the category_ids of this KernelPushRequest.

        A list of tag IDs to associated with the kernel  # noqa: E501

        :param category_ids: The category_ids of this KernelPushRequest.  # noqa: E501
        :type: list[str]
        """
        ...
    
    @property
    def docker_image_pinning_type(self): # -> None:
        """Gets the docker_image_pinning_type of this KernelPushRequest.  # noqa: E501

        Which docker image to use for executing new versions going forward.  # noqa: E501

        :return: The docker_image_pinning_type of this KernelPushRequest.  # noqa: E501
        :rtype: str
        """
        ...
    
    @docker_image_pinning_type.setter
    def docker_image_pinning_type(self, docker_image_pinning_type): # -> None:
        """Sets the docker_image_pinning_type of this KernelPushRequest.

        Which docker image to use for executing new versions going forward.  # noqa: E501

        :param docker_image_pinning_type: The docker_image_pinning_type of this KernelPushRequest.  # noqa: E501
        :type: str
        """
        ...
    
    def to_dict(self): # -> dict[Any, Any]:
        """Returns the model properties as a dict"""
        ...
    
    def to_str(self): # -> str:
        """Returns the string representation of the model"""
        ...
    
    def __repr__(self): # -> str:
        """For `print` and `pprint`"""
        ...
    
    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        ...
    
    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        ...
    


