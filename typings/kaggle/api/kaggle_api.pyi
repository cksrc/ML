"""
This type stub file was generated by pyright.
"""

"""
    Kaggle API

    API for kaggle.com  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
class KaggleApi:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """
    def __init__(self, api_client=...) -> None:
        ...
    
    def competition_download_leaderboard(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download competition leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_download_leaderboard(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competition_download_leaderboard_with_http_info(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download competition leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_download_leaderboard_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competition_view_leaderboard(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """VIew competition leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_view_leaderboard(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competition_view_leaderboard_with_http_info(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """VIew competition leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competition_view_leaderboard_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_download_file(self, id, file_name, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download competition data file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_download_file(id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param str file_name: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_download_file_with_http_info(self, id, file_name, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download competition data file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_download_file_with_http_info(id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param str file_name: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_download_files(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download all competition data files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_download_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_download_files_with_http_info(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download all competition data files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_download_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_list_files(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competition data files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_list_files(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param str page_token: Page token for pagination
        :param int page_size: Number of items per page (default 20)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_data_list_files_with_http_info(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competition data files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_data_list_files_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param str page_token: Page token for pagination
        :param int page_size: Number of items per page (default 20)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_list(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: Filter competitions by a particular group
        :param str category: Filter competitions by a particular category
        :param str sort_by: Sort the results
        :param int page: Page number
        :param str search: Search terms
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_list_with_http_info(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competitions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: Filter competitions by a particular group
        :param str category: Filter competitions by a particular category
        :param str sort_by: Sort the results
        :param int page: Page number
        :param str search: Search terms
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_list(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competition submissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param int page: Page number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_list_with_http_info(self, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List competition submissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name (required)
        :param int page: Page number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_submit(self, blob_file_tokens, submission_description, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Submit to competition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_submit(blob_file_tokens, submission_description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blob_file_tokens: Token identifying location of uploaded submission file (required)
        :param str submission_description: Description of competition submission (required)
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_submit_with_http_info(self, blob_file_tokens, submission_description, id, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Submit to competition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_submit_with_http_info(blob_file_tokens, submission_description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blob_file_tokens: Token identifying location of uploaded submission file (required)
        :param str submission_description: Description of competition submission (required)
        :param str id: Competition name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_upload(self, file, guid, content_length, last_modified_date_utc, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Upload competition submission file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_upload(file, guid, content_length, last_modified_date_utc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Competition submission file (required)
        :param str guid: Location where submission should be uploaded (required)
        :param int content_length: Content length of file in bytes (required)
        :param int last_modified_date_utc: Last modified date of file in seconds since epoch in UTC (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_upload_with_http_info(self, file, guid, content_length, last_modified_date_utc, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Upload competition submission file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_upload_with_http_info(file, guid, content_length, last_modified_date_utc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Competition submission file (required)
        :param str guid: Location where submission should be uploaded (required)
        :param int content_length: Content length of file in bytes (required)
        :param int last_modified_date_utc: Last modified date of file in seconds since epoch in UTC (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_url(self, id, content_length, last_modified_date_utc, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Generate competition submission URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_url(id, content_length, last_modified_date_utc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name, as it appears in the competition's URL (required)
        :param int content_length: Content length of file in bytes (required)
        :param int last_modified_date_utc: Last modified date of file in seconds since epoch in UTC (required)
        :param str file_name: Competition submission file name
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def competitions_submissions_url_with_http_info(self, id, content_length, last_modified_date_utc, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Generate competition submission URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.competitions_submissions_url_with_http_info(id, content_length, last_modified_date_utc, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Competition name, as it appears in the competition's URL (required)
        :param int content_length: Content length of file in bytes (required)
        :param int last_modified_date_utc: Last modified date of file in seconds since epoch in UTC (required)
        :param str file_name: Competition submission file name
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def create_inbox_file(self, create_inbox_file_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Creates (aka \&quot;drops\&quot;) a new file into the inbox.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_inbox_file(create_inbox_file_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateInboxFileRequest create_inbox_file_request: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def create_inbox_file_with_http_info(self, create_inbox_file_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Creates (aka \&quot;drops\&quot;) a new file into the inbox.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_inbox_file_with_http_info(create_inbox_file_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateInboxFileRequest create_inbox_file_request: (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_new(self, dataset_new_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_new(dataset_new_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetNewRequest dataset_new_request: Information for creating a new dataset (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_new_with_http_info(self, dataset_new_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_new_with_http_info(dataset_new_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetNewRequest dataset_new_request: Information for creating a new dataset (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_version(self, owner_slug, dataset_slug, dataset_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_version(owner_slug, dataset_slug, dataset_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param DatasetNewVersionRequest dataset_new_version_request: Information for creating a new dataset version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_version_with_http_info(self, owner_slug, dataset_slug, dataset_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_version_with_http_info(owner_slug, dataset_slug, dataset_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param DatasetNewVersionRequest dataset_new_version_request: Information for creating a new dataset version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_version_by_id(self, id, dataset_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset version by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_version_by_id(id, dataset_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Dataset ID (required)
        :param DatasetNewVersionRequest dataset_new_version_request: Information for creating a new dataset version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_create_version_by_id_with_http_info(self, id, dataset_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new dataset version by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_create_version_by_id_with_http_info(id, dataset_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Dataset ID (required)
        :param DatasetNewVersionRequest dataset_new_version_request: Information for creating a new dataset version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_download(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download dataset file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_download(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str dataset_version_number: Dataset version number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_download_with_http_info(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download dataset file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_download_with_http_info(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str dataset_version_number: Dataset version number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_download_file(self, owner_slug, dataset_slug, file_name, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download dataset file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_download_file(owner_slug, dataset_slug, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str file_name: File name (required)
        :param str dataset_version_number: Dataset version number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_download_file_with_http_info(self, owner_slug, dataset_slug, file_name, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download dataset file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_download_file_with_http_info(owner_slug, dataset_slug, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str file_name: File name (required)
        :param str dataset_version_number: Dataset version number
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_list(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: Display datasets by a particular group
        :param str sort_by: Sort the results
        :param str size: (DEPRECATED). Please use --max-size and --min-size to filter dataset sizes.
        :param str filetype: Display datasets of a specific file type
        :param str license: Display datasets with a specific license
        :param str tagids: A comma separated list of tags to filter by
        :param str search: Search terms
        :param str user: Display datasets by a specific user or organization
        :param int page: Page number
        :param int max_size: Max Dataset Size (bytes)
        :param int min_size: Max Dataset Size (bytes)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_list_with_http_info(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: Display datasets by a particular group
        :param str sort_by: Sort the results
        :param str size: (DEPRECATED). Please use --max-size and --min-size to filter dataset sizes.
        :param str filetype: Display datasets of a specific file type
        :param str license: Display datasets with a specific license
        :param str tagids: A comma separated list of tags to filter by
        :param str search: Search terms
        :param str user: Display datasets by a specific user or organization
        :param int page: Page number
        :param int max_size: Max Dataset Size (bytes)
        :param int min_size: Max Dataset Size (bytes)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_list_files(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List dataset files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_list_files(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str dataset_version_number: Dataset version number
        :param str page_token: Page token for pagination
        :param int page_size: Number of items per page (default 20)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_list_files_with_http_info(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List dataset files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_list_files_with_http_info(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param str dataset_version_number: Dataset version number
        :param str page_token: Page token for pagination
        :param int page_size: Number of items per page (default 20)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_status(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get dataset creation status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_status(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def datasets_status_with_http_info(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get dataset creation status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datasets_status_with_http_info(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model(self, owner_slug, model_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model(owner_slug, model_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model_with_http_info(self, owner_slug, model_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_with_http_info(owner_slug, model_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model_instance(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_instance(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model_instance_with_http_info(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_instance_with_http_info(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model_instance_version(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model instance version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_instance_version(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def delete_model_instance_version_with_http_info(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Delete a model instance version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_model_instance_version_with_http_info(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def get_model(self, owner_slug, model_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model(owner_slug, model_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def get_model_with_http_info(self, owner_slug, model_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_with_http_info(owner_slug, model_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def get_model_instance(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get a model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_instance(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def get_model_instance_with_http_info(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get a model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_instance_with_http_info(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_output(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download the latest output from a kernel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_output(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_output_with_http_info(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download the latest output from a kernel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_output_with_http_info(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_pull(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Pull the latest code from a kernel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_pull(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_pull_with_http_info(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Pull the latest code from a kernel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_pull_with_http_info(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_push(self, kernel_push_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Push a new kernel version.  Can be used to create a new kernel and update an existing one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_push(kernel_push_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KernelPushRequest kernel_push_request: Information for pushing a new kernel version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_push_with_http_info(self, kernel_push_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Push a new kernel version.  Can be used to create a new kernel and update an existing one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_push_with_http_info(kernel_push_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KernelPushRequest kernel_push_request: Information for pushing a new kernel version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_status(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get the status of the latest kernel version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_status(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernel_status_with_http_info(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get the status of the latest kernel version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernel_status_with_http_info(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernels_list(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List kernels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernels_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number
        :param int page_size: Number of items per page (default 20)
        :param str search: Search terms
        :param str group: Display only your kernels
        :param str user: Display kernels by a particular group
        :param str language: Display kernels in a specific language
        :param str kernel_type: Display kernels of a specific type
        :param str output_type: Display kernels with a specific output type
        :param str sort_by: Sort the results. 'relevance' only works if there is a search query
        :param str dataset: Display kernels using the specified dataset
        :param str competition: Display kernels using the specified competition
        :param str parent_kernel: Display kernels that have forked the specified kernel
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernels_list_with_http_info(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List kernels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernels_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number
        :param int page_size: Number of items per page (default 20)
        :param str search: Search terms
        :param str group: Display only your kernels
        :param str user: Display kernels by a particular group
        :param str language: Display kernels in a specific language
        :param str kernel_type: Display kernels of a specific type
        :param str output_type: Display kernels with a specific output type
        :param str sort_by: Sort the results. 'relevance' only works if there is a search query
        :param str dataset: Display kernels using the specified dataset
        :param str competition: Display kernels using the specified competition
        :param str parent_kernel: Display kernels that have forked the specified kernel
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernels_list_files(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List kernel files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernels_list_files(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :param str kernel_version_number: Kernel version number
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def kernels_list_files_with_http_info(self, user_name, kernel_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List kernel files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kernels_list_files_with_http_info(user_name, kernel_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Kernel owner (required)
        :param str kernel_slug: Kernel name (required)
        :param str kernel_version_number: Kernel version number
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def metadata_get(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get the metadata for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metadata_get(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def metadata_get_with_http_info(self, owner_slug, dataset_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Get the metadata for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metadata_get_with_http_info(owner_slug, dataset_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def metadata_post(self, owner_slug, dataset_slug, settings, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update the metadata for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metadata_post(owner_slug, dataset_slug, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param DatasetUpdateSettingsRequest settings: Dataset metadata to update (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def metadata_post_with_http_info(self, owner_slug, dataset_slug, settings, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update the metadata for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metadata_post_with_http_info(owner_slug, dataset_slug, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Dataset owner (required)
        :param str dataset_slug: Dataset name (required)
        :param DatasetUpdateSettingsRequest settings: Dataset metadata to update (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_files(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List model instance files for the current version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_files(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_files_with_http_info(self, owner_slug, model_slug, framework, instance_slug, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List model instance files for the current version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_files_with_http_info(owner_slug, model_slug, framework, instance_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_version_files(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List model instance version files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_version_files(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_version_files_with_http_info(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """List model instance version files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_version_files_with_http_info(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_versions_download(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download model instance version files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_versions_download(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def model_instance_versions_download_with_http_info(self, owner_slug, model_slug, framework, instance_slug, version_number, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Download model instance version files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_instance_versions_download_with_http_info(owner_slug, model_slug, framework, instance_slug, version_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param str version_number: Model instance version number (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_instance(self, owner_slug, model_slug, model_new_instance_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_instance(owner_slug, model_slug, model_new_instance_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model slug (required)
        :param ModelNewInstanceRequest model_new_instance_request: Information for creating a new model instance (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_instance_with_http_info(self, owner_slug, model_slug, model_new_instance_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_instance_with_http_info(owner_slug, model_slug, model_new_instance_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model slug (required)
        :param ModelNewInstanceRequest model_new_instance_request: Information for creating a new model instance (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_instance_version(self, owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model instance version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_instance_version(owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model slug (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param ModelInstanceNewVersionRequest model_instance_new_version_request: Information for creating a new model instance version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_instance_version_with_http_info(self, owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model instance version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_instance_version_with_http_info(owner_slug, model_slug, framework, instance_slug, model_instance_new_version_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model slug (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param ModelInstanceNewVersionRequest model_instance_new_version_request: Information for creating a new model instance version (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_new(self, model_new_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_new(model_new_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelNewRequest model_new_request: Information for creating a new model (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_create_new_with_http_info(self, model_new_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Create a new model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_create_new_with_http_info(model_new_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelNewRequest model_new_request: Information for creating a new model (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_list(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Lists models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Search terms
        :param str sort_by: Sort the results
        :param str owner: Display models by a specific user or organization
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def models_list_with_http_info(self, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Lists models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.models_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Search terms
        :param str sort_by: Sort the results
        :param str owner: Display models by a specific user or organization
        :param int page_size: Number of items per page (default 20)
        :param str page_token: Page token for pagination
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def update_model(self, owner_slug, model_slug, model_update_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model(owner_slug, model_slug, model_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param ModelUpdateRequest model_update_request: Information for updating a model (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def update_model_with_http_info(self, owner_slug, model_slug, model_update_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model_with_http_info(owner_slug, model_slug, model_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param ModelUpdateRequest model_update_request: Information for updating a model (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def update_model_instance(self, owner_slug, model_slug, framework, instance_slug, model_instance_update_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model_instance(owner_slug, model_slug, framework, instance_slug, model_instance_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param ModelInstanceUpdateRequest model_instance_update_request: Information for updating a model instance (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def update_model_instance_with_http_info(self, owner_slug, model_slug, framework, instance_slug, model_instance_update_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Update a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_model_instance_with_http_info(owner_slug, model_slug, framework, instance_slug, model_instance_update_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_slug: Model owner (required)
        :param str model_slug: Model name (required)
        :param str framework: Model instance framework (required)
        :param str instance_slug: Model instance slug (required)
        :param ModelInstanceUpdateRequest model_instance_update_request: Information for updating a model instance (required)
        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def upload_file(self, start_blob_upload_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Start uploading a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file(start_blob_upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StartBlobUploadRequest start_blob_upload_request: (required)
        :return: StartBlobUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    
    def upload_file_with_http_info(self, start_blob_upload_request, **kwargs): # -> str | list[Any] | dict[Any, Any] | _Date | datetime | tuple[str | list[Any] | dict[Any, Any] | Any | _Date | datetime | None, Any, Any] | AsyncResult | None:
        """Start uploading a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_with_http_info(start_blob_upload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StartBlobUploadRequest start_blob_upload_request: (required)
        :return: StartBlobUploadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        ...
    


